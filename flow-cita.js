const { addKeyword } = require('@bot-whatsapp/bot');
const { userState } = require('../utils/state-manager');

// Flujo para confirmar la cita
const flowConfirmarCita = addKeyword(['1', 'si', 's√≠', 'confirmar'])
    .addAnswer(
        async (ctx, { flowDynamic }) => {
            const userData = userState.get(ctx.from) || {};
            
            await flowDynamic([
                '‚úÖ ¬°Perfecto! Tu cita ha sido confirmada con los siguientes datos:',
                `üìã Nombre: ${userData.nombre}`,
                `üì± Tel√©fono: ${userData.telefono || 'No proporcionado'}`,
                `üóìÔ∏è Fecha: ${userData.fecha}`,
                `‚è∞ Hora: ${userData.hora}`,
                `üíá Servicio: ${userData.servicio}`,
                '',
                'Te esperamos en nuestra direcci√≥n:',
                'üìç Avenida Principal #123, Bogot√°',
                '',
                'Si necesitas modificar o cancelar tu cita, escribe *cambiar cita* o *cancelar cita*.'
            ]);
            
            // Aqu√≠ podr√≠as implementar la l√≥gica para guardar la cita en una base de datos
        }
    );

// Flujo para rechazar la cita
const flowRechazarCita = addKeyword(['2', 'no', 'cancelar'])
    .addAnswer(
        ['Has cancelado el proceso de reserva de cita.', 
         'Si deseas intentarlo de nuevo, escribe *cita* en cualquier momento.',
         'Si necesitas ayuda con otra cosa, escribe *hola* para volver al men√∫ principal.']
    );

// Flujo para capturar el servicio
const flowServicio = addKeyword(['hora', 'servicio'])
    .addAnswer(
        ['¬øQu√© servicio deseas agendar?',
         '- Corte de cabello',
         '- Tinte',
         '- Peinado',
         '- Manicure',
         '- Pedicure',
         '- Tratamiento facial',
         '- Otro (especificar)'],
        { capture: true },
        async (ctx, { flowDynamic }) => {
            const userData = userState.get(ctx.from) || {};
            userData.servicio = ctx.body;
            userState.set(ctx.from, userData);
            
            await flowDynamic([
                'Por favor, revisa tus datos:',
                `üìã Nombre: ${userData.nombre}`,
                `üì± Tel√©fono: ${userData.telefono || 'No proporcionado'}`,
                `üóìÔ∏è Fecha: ${userData.fecha}`,
                `‚è∞ Hora: ${userData.hora}`,
                `üíá Servicio: ${userData.servicio}`,
                '',
                '¬øDeseas confirmar esta cita?',
                '1. S√≠, confirmar',
                '2. No, cancelar'
            ]);
        },
        [flowConfirmarCita, flowRechazarCita]
    );

// Flujo para capturar la hora
const flowHora = addKeyword(['fecha', 'hora'])
    .addAnswer(
        ['¬øA qu√© hora prefieres tu cita? (formato HH:MM, ejemplo: 14:30)'],
        { capture: true },
        async (ctx, { flowDynamic, gotoFlow }) => {
            const userData = userState.get(ctx.from) || {};
            userData.hora = ctx.body;
            userState.set(ctx.from, userData);
            
            return gotoFlow(flowServicio);
        },
        [flowServicio]
    );

// Flujo para capturar la fecha
const flowFecha = addKeyword(['telefono', 'tel√©fono', 'fecha'])
    .addAnswer(
        ['¬øEn qu√© fecha te gustar√≠a agendar tu cita? (formato DD/MM/YYYY, ejemplo: 30/04/2025)'],
        { capture: true },
        async (ctx, { flowDynamic, gotoFlow }) => {
            const userData = userState.get(ctx.from) || {};
            userData.fecha = ctx.body;
            userState.set(ctx.from, userData);
            
            return gotoFlow(flowHora);
        },
        [flowHora]
    );

// Flujo para capturar el tel√©fono
const flowTelefono = addKeyword(['nombre', 'telefono', 'tel√©fono'])
    .addAnswer(
        ['Por favor, proporciona un n√∫mero de tel√©fono de contacto:'],
        { capture: true },
        async (ctx, { flowDynamic, gotoFlow }) => {
            const userData = userState.get(ctx.from) || {};
            userData.telefono = ctx.body;
            userState.set(ctx.from, userData);
            
            return gotoFlow(flowFecha);
        },
        [flowFecha]
    );

// Flujo principal para citas
const flowCita = addKeyword(['cita', 'agendar', 'reservar'])
    .addAnswer(
        ['üëã ¬°Vamos a agendar tu cita!', '¬øCu√°l es tu nombre completo?'],
        { capture: true },
        async (ctx, { flowDynamic, gotoFlow }) => {
            // Inicializar o actualizar datos del usuario
            const userData = userState.get(ctx.from) || {};
            userData.nombre = ctx.body;
            userState.set(ctx.from, userData);
            
            return gotoFlow(flowTelefono);
        },
        [flowTelefono]
    );

// Flujo para modificar una cita existente
const flowModificarCita = addKeyword(['modificar cita', 'cambiar cita'])
    .addAnswer(
        ['Para modificar tu cita, por favor cont√°ctanos directamente al tel√©fono 123-456-7890.',
         'Un asesor te atender√° y realizar√° los cambios necesarios en tu reserva.']
    );

// Flujo para cancelar una cita existente
const flowCancelarCita = addKeyword(['cancelar cita'])
    .addAnswer(
        ['Para cancelar tu cita, por favor escribe tu nombre completo:'],
        { capture: true },
        async (ctx, { flowDynamic }) => {
            // Aqu√≠ podr√≠as implementar la l√≥gica para buscar y cancelar la cita en una base de datos
            
            await flowDynamic([
                `Gracias, ${ctx.body}. Hemos recibido tu solicitud de cancelaci√≥n.`,
                'Un asesor procesar√° tu cancelaci√≥n y te enviaremos una confirmaci√≥n.',
                'Si tienes alguna duda, cont√°ctanos al tel√©fono 123-456-7890.'
            ]);
        }
    );

module.exports = {
    flowCita,
    flowModificarCita,
    flowCancelarCita
};